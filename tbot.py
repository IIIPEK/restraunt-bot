from types import SimpleNamespace
import telebot
from telebot import types

from order_manager import FoodOrderManager, init_fo_manager
from db_module import DBConnector, DBManager
import uuid
import os
import csv
from design import show_main_menu, show_menu_categories, show_menu_category_items, select_quantity
from design import (make_menu_categories,
                    make_menu_category_items,
                    make_quantity_dialog,
                    menu_tree_previous,
                    create_keyboard_variable_rows)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7265481895:AAEiGtEWswZa-Jz0CMf63j-zn9-wWcaOzME'
#TOKEN = "7918967502:AAGbpGfUYbw0M5QphKGF0TR-8jnDYJsjEmw"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π
number_of_seats = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
# def init_fo_manager(db_type='sqlite'):
#     db_connector = DBConnector(db_type)
#     db_manager = DBManager(db_connector)
#     return FoodOrderManager(db_manager)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
sessions = {}
user_data = {}

def delete_old_message(message):
    user_id = message.from_user.id
    if (user_id in user_data
        and "old_message" in user_data[user_id]
        and user_data[user_id]["old_message"] is not None):
        bot.delete_message(message.chat.id, user_data[user_id]["old_message"])
        user_data[message.from_user.id]["old_message"] = None


# –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è /start –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
def trigger_start(chat_id):
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    class FakeMessage:
        def __init__(self, message):
            self.chat = SimpleNamespace(id=message.chat.id)
            self.text = '/start'
            self.from_user = types.User(id= message.chat.id,
                                        is_bot=False,
                                        first_name=message.chat.first_name,
                                        last_name=message.chat.last_name,
                                        username=message.chat.username
                                        )

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start(FakeMessage(chat_id))

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    if hasattr(message, 'message_id'):
        bot.delete_message(message.chat.id, message.message_id)
    food_order_manager = init_fo_manager()
    user_id = message.from_user.id
    user_data[user_id]={}
    order_pending = food_order_manager.get_user_orders_by_status(user_id)[-1]
    if len(order_pending) > 0:
        user_data[user_id]['order_id'] = order_pending[0]
    user_data[user_id]["old_message"] = message


    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    full_name = f"{first_name or ''} {last_name or ''}"
    if full_name == " ":
        full_name = username
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not food_order_manager.check_user_exists(telegram_id=user_id):
        if food_order_manager.create_user(user_id, username, first_name, last_name):
            bot.send_message(message.chat.id, f"üòÄ {full_name}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!üëç")
    else:
        bot.send_message(message.chat.id, f"üëè–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {full_name} !ü§ó")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    old_message = show_main_menu(bot,message,user_data)
    food_order_manager.db_manager.close()
    print(user_data)


# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—é')
def show_menu(message):
    bot.delete_message(message.chat.id, message.message_id)
    if message.from_user.id not in user_data:
        trigger_start(message)
        return
    #delete_old_message(message)
    user_data[message.from_user.id]["old_message"] = make_menu_categories(bot,message,user_data)
    bot.delete_message(message.chat.id, message.message_id)
    print(user_data)

# –ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text in [category[1] for category in init_fo_manager().get_menu_categories()])
def show_category_items(message):
    bot.delete_message(message.chat.id, message.message_id)
    if len(user_data)==0:
        trigger_start(message)
        return False
    make_menu_category_items(bot, message, user_data)
    bot.delete_message(message.chat.id, message.message_id)
    # food_order_manager = init_fo_manager()
    # category_name = message.text
    # category_id = next(category[0] for category in food_order_manager.get_menu_categories() if category[1] == category_name)
    # items = food_order_manager.get_menu_items(category_id=category_id)
    # show_menu_category_items(bot,message,items, user_data)
    # food_order_manager.db_manager.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@bot.message_handler(func=lambda message: message.text.endswith('—Ä—É–±.'))
def select_item_quantity(message):
    if len(user_data)==0:
        trigger_start(message)
        return False
    make_quantity_dialog(bot, message, user_data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
#@bot.message_handler(func=lambda message: message.text.endswith('—à—Ç.'))
@bot.message_handler(func=lambda message: message.text.isdigit() and 1<=int(message.text) <= number_of_seats)
def add_item_to_order(message):
    user_id = message.from_user.id
    quantity = int(message.text)
    print (user_data)

    if user_id not in user_data or 'selected_item' not in user_data[user_id]:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    food_order_manager = init_fo_manager()
    item_name = user_data[user_id]['selected_item']
    item = next(item for item in food_order_manager.get_menu_items() if item[2] == item_name)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if 'order_id' not in user_data[user_id]:
        order_id = str(uuid.uuid4())
        user_data[user_id]['order_id'] = order_id
        food_order_manager.create_order(user_id, total_price=0)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
    food_order_manager.add_item_to_order(user_data[user_id]['order_id'], item[0], quantity)
    bot.send_message(message.chat.id, f"{quantity} –ø–æ—Ä—Ü–∏–π '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!")

    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ
    del user_data[user_id]['selected_item']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    show_menu_with_checkout(message.chat.id)
    food_order_manager.db_manager.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
def show_menu_with_checkout(chat_id):
    food_order_manager = init_fo_manager()
    categories = food_order_manager.get_menu_categories()
    markup = types.ReplyKeyboardMarkup(row_width=2)
    for category in categories:
        markup.add(types.KeyboardButton(category[1]))
    markup.add(types.KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=markup)
    food_order_manager.db_manager.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
def checkout_order(message):
    chat_id = message.chat.id
    bot.delete_message(chat_id, message.message_id)
    user_id = message.from_user.id
    print(f"{user_id} - –ù–∞–∂–∞–ª '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'")
    food_order_manager = init_fo_manager()
    user_data[user_id] = user_data.get(user_id, {})
    msg = None
    if 'order_id' not in user_data[user_id]:
        order_pending = food_order_manager.get_user_orders_by_status(user_id)[-1]
        if len(order_pending) > 0:
            user_data[user_id]['order_id'] = order_pending[0]
            msg = bot.send_message(chat_id, "–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑.")
        else:
            msg.bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.")
            return


    order_id = user_data[user_id]['order_id']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_items = food_order_manager.get_order_items(order_id)
    if len(order_items) == 0:
        bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.")
        return
    total_price = sum(item[2] * item[3] for item in order_items)  # price * quantity
    title = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b> :  {total_price} —Ä—É–±."
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–æ–º
    kbd = create_keyboard_variable_rows(order_items)
    user_data[user_id]["order_form"] = bot.send_message(chat_id, title, reply_markup=kbd, parse_mode='HTML')
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(bot,message,user_data)
    food_order_manager.db_manager.close()
    if msg:
        bot.delete_message(message.chat.id, msg.message_id)


@bot.message_handler(func=lambda message: message.text == "–ü–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
def clear_chat(message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    message_ids = [message.message_id - i for i in range(100)]

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for msg_id in message_ids:
        try:
            bot.delete_message(chat_id, msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {msg_id}: {e}")

@bot.message_handler(func=lambda message: message.text == 'X' or message.text == '–ù–∞–∑–∞–¥' or message.text == '0' or message.text == '‚ùå')
def go_back(message):
    if len(user_data)==0:
        trigger_start(message)
        return False
    print(user_data)
    usr_data = user_data[message.from_user.id]
    #previous_step = menu_tree_previous[usr_data["step"]][0]
    previous_menu = menu_tree_previous[usr_data["step"]][1]
    previous_menu(bot, message, user_data)
    bot.delete_message(message.chat.id, message.message_id)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
def show_user_orders(message):
    food_order_manager = init_fo_manager()
    user_id = message.from_user.id
    print(f"{user_id} - –ù–∞–∂–∞–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'")
    bot.delete_message(message.chat.id, message.message_id)
    food_order_manager.update_all_orders()
    orders = food_order_manager.get_user_orders(user_id)
    if orders:
        for order in orders:
            bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ #{order[0]}: {order[2]}, –°—É–º–º–∞: {order[3]} —Ä—É–±.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    food_order_manager.db_manager.close()

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.text == '/admin_secret_command':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")
        bot.register_next_step_handler(message, handle_csv)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞
def handle_csv(message):
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open("uploaded_file.csv", "wb") as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, "CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")

@bot.message_handler(func=lambda message: True)
def handle_unprocessed_messages(message):
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username or message.from_user.first_name}: {message.text}")

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data==('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
def handle_close_order_callback(call):
    user_id = call.from_user.id
    if user_id in user_data and "order_id" in user_data[user_id]:
        del user_data[user_id]["order_id"]
    bot.send_message(call.id, "–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_callback(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ 'delete_'
    user_id = call.from_user.id
    if user_id in user_data and "order_form" in user_data[user_id] :
        item_to_delete = call.data[len('delete_'):]
    else:
        bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é")
        trigger_start(call.message)
        return


    # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    food_order_manager = init_fo_manager()
    food_order_manager.delete_order_item(item_to_delete)
    food_order_manager.update_all_orders()
    order_items = food_order_manager.get_order_items(user_data[call.from_user.id]["order_id"])
    if len(order_items) == 0:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.")
        return
    total_price = sum(item[2] * item[3] for item in order_items)  # price * quantity
    title = f"<b>–í–∞—à –∑–∞–∫–∞–∑</b> :  {total_price} —Ä—É–±."
    bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=title,
                                  reply_markup=create_keyboard_variable_rows(order_items),
                                  parse_mode='HTML')
    bot.send_message(call.message.chat.id, "–ü—É–Ω–∫—Ç –∑–∞–∫–∞–∑–∞ —É–¥–∞–ª–µ–Ω.")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    print(f"Callback query from {call.from_user.username or call.from_user.first_name}: {call.data}")
    user_id = call.from_user.id
    quantity = int(call.data)
    print(user_data)

    if len(user_data) == 0:
        bot.send_message(call.id, "–°–µ—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é")
        trigger_start(call.message)

    if user_data[user_id]["step"] != "Item_quantity":
        bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é")
        return

    if user_id not in user_data or 'selected_item' not in user_data[user_id]:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    food_order_manager = init_fo_manager()
    item_name = user_data[user_id]['selected_item']
    item = food_order_manager.get_menu_item_id_by_name(item_name)[0]
    bot.delete_message(call.message.chat.id, call.message.message_id)

    #item = next(item for item in food_order_manager.get_menu_items() if item[2] == item_name)


    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if 'order_id' not in user_data[user_id]:
        order_pending = food_order_manager.get_user_orders_by_status(user_id)[-1]
        if len(order_pending) > 0:
            user_data[user_id]['order_id'] = order_pending[0]
            bot.send_message(call.message.chat.id, "–ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –ü—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
        else:
            order_id = str(uuid.uuid4())
            user_data[user_id]['order_id'] = order_id
            food_order_manager.create_order(user_id, total_price=0)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
    food_order_manager.add_item_to_order(user_data[user_id]['order_id'], item[0], quantity)
    bot.send_message(call.message.chat.id, f"{quantity} –ø–æ—Ä—Ü–∏–π '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!")
    food_order_manager.update_all_orders()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
