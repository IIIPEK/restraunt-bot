import telebot
from telebot import types
from order_manager import FoodOrderManager, init_fo_manager
from db_module import DBConnector, DBManager
import uuid
import os
import csv
from design import show_main_menu, show_menu_categories, show_menu_category_items, select_quantity
from design import (make_menu_categories,
                    make_menu_category_items,
                    make_quantity_dialog)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7265481895:AAEiGtEWswZa-Jz0CMf63j-zn9-wWcaOzME'
#TOKEN = "7918967502:AAGbpGfUYbw0M5QphKGF0TR-8jnDYJsjEmw"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π
number_of_seats = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
# def init_fo_manager(db_type='sqlite'):
#     db_connector = DBConnector(db_type)
#     db_manager = DBManager(db_connector)
#     return FoodOrderManager(db_manager)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
sessions = {}
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    food_order_manager = init_fo_manager()
    user_id = message.from_user.id
    user_data[user_id]={}
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    full_name = first_name + " " + last_name
    if full_name == " ":
        full_name = "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ üòé"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not food_order_manager.check_user_exists(telegram_id=user_id):
        if food_order_manager.create_user(user_id, username, first_name, last_name):
            bot.send_message(message.chat.id, f"üòÄ {full_name}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!üëç")
        else:
            raise
    else:
        bot.send_message(message.chat.id, f"üëè–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {full_name} !ü§ó")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    show_main_menu(bot,message,user_data)
    food_order_manager.db_manager.close()
    print(user_data)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—é')
def show_menu(message):
    make_menu_categories(bot,message,user_data)
    # food_order_manager = init_fo_manager()
    # categories = food_order_manager.get_menu_categories()
    # show_menu_categories(bot,message,categories,user_data)
    # food_order_manager.db_manager.close()
    print(user_data)

# –ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: message.text in [category[1] for category in init_fo_manager().get_menu_categories()])
def show_category_items(message):
    make_menu_category_items(bot, message, user_data)
    # food_order_manager = init_fo_manager()
    # category_name = message.text
    # category_id = next(category[0] for category in food_order_manager.get_menu_categories() if category[1] == category_name)
    # items = food_order_manager.get_menu_items(category_id=category_id)
    # show_menu_category_items(bot,message,items, user_data)
    # food_order_manager.db_manager.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@bot.message_handler(func=lambda message: message.text.endswith('—Ä—É–±.'))
def select_item_quantity(message):
    make_quantity_dialog(bot, message, user_data)
    # food_order_manager = init_fo_manager()
    # user_id = message.from_user.id
    # item_name = message.text.split(' - ')[0]
    # item_id = food_order_manager.get_menu_item_id_by_name(item_name)[0]
    #
    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ –≤ user_data
    # user_data[user_id] = {'selected_item': item_name}
    # user_data[user_id] = {"step": "Item_quantity"}
    # user_data[user_id] = {"item_id": item_id}
    # image_path = os.path.join('img', 'zap_kab.jpg')
    # print(user_data)
    # select_quantity(bot,message,item_name,image_path=image_path)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    # markup = types.ReplyKeyboardMarkup(row_width=5)
    # for i in range(1, number_of_seats + 1):
    #     markup.add(types.KeyboardButton(str(i)))
    #
    # bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ü–∏–π '{item_name}' –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.message_handler(func=lambda message: message.text.isdigit() and 1 <= int(message.text) <= number_of_seats)
def add_item_to_order(message):
    user_id = message.from_user.id
    quantity = int(message.text)

    if user_id not in user_data or 'selected_item' not in user_data[user_id]:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    food_order_manager = init_fo_manager()
    item_name = user_data[user_id]['selected_item']
    item = next(item for item in food_order_manager.get_menu_items() if item[2] == item_name)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if 'order_id' not in user_data[user_id]:
        order_id = str(uuid.uuid4())
        user_data[user_id]['order_id'] = order_id
        food_order_manager.create_order(user_id, total_price=0)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑
    food_order_manager.add_item_to_order(user_data[user_id]['order_id'], item[0], quantity)
    bot.send_message(message.chat.id, f"{quantity} –ø–æ—Ä—Ü–∏–π '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑!")

    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ
    del user_data[user_id]['selected_item']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    show_menu_with_checkout(message.chat.id)
    food_order_manager.db_manager.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
def show_menu_with_checkout(chat_id):
    food_order_manager = init_fo_manager()
    categories = food_order_manager.get_menu_categories()
    markup = types.ReplyKeyboardMarkup(row_width=2)
    for category in categories:
        markup.add(types.KeyboardButton(category[1]))
    markup.add(types.KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=markup)
    food_order_manager.db_manager.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
def checkout_order(message):
    user_id = message.from_user.id
    print(f"{user_id} - –ù–∞–∂–∞–ª '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'")

    if 'order_id' not in user_data.get(user_id, {}):
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç.")
        return

    food_order_manager = init_fo_manager()
    order_id = user_data[user_id]['order_id']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order_items = food_order_manager.get_order_items(order_id)
    total_price = sum(item[1] * item[2] for item in order_items)  # price * quantity

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
    order_message = "–í–∞—à –∑–∞–∫–∞–∑:\n"
    for item in order_items:
        order_message += f"{item[0]} - {item[2]} —à—Ç. - {item[1] * item[2]} —Ä—É–±.\n"
    order_message += f"–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."

    bot.send_message(message.chat.id, order_message)

    # –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑
    del user_data[user_id]['order_id']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message.chat.id)
    food_order_manager.db_manager.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
def show_user_orders(message):
    food_order_manager = init_fo_manager()
    user_id = message.from_user.id
    print(f"{user_id} - –ù–∞–∂–∞–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'")
    orders = food_order_manager.get_user_orders(user_id)
    if orders:
        for order in orders:
            bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ #{order[0]}: {order[2]}, –°—É–º–º–∞: {order[3]} —Ä—É–±.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    food_order_manager.db_manager.close()

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.text == '/admin_secret_command':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")
        bot.register_next_step_handler(message, handle_csv)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞
def handle_csv(message):
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open("uploaded_file.csv", "wb") as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, "CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
