import telebot
from telebot import types
import threading
import os
from order_manager import FoodOrderManager
from db_module import DBConnector, DBManager
import uuid
from order_manager import FoodOrderManager, init_fo_manager
from design import create_reply_kbd, create_inline_kbd
from payment import process_payment_animation


# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(bot,message,user_data):
    user_id = message.from_user.id
    main_menu = ["–ú–µ–Ω—é","–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–û—Ç–∑—ã–≤—ã", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–ü–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç","–í—ã–π—Ç–∏"]
    keyboard = create_reply_kbd(row_width=2, values=main_menu, back = None)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    print(user_data)
    user_data[user_id]["step"]= "Main_menu"
    return msg.chat.id, msg.message_id

def show_menu_categories(bot,message,categories,user_data):
    user_id = message.from_user.id
    category = [row[1] for row in categories]
    category.append("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")

    print(message.chat.id)
    keyboard = create_reply_kbd(row_width=3, values=category, back="–ù–∞–∑–∞–¥")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    user_data[user_id]["step"] = "Category_menu"
    return msg.chat.id, msg.message_id

def show_menu_category_items(bot,message,items,user_data):
    user_id = message.from_user.id
    item = [f"{row[2]} - {row[4]} —Ä—É–±." for row in items]
    item.append("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    keyboard = create_reply_kbd(row_width=3, values=item, back="–ù–∞–∑–∞–¥")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=keyboard)
    user_data[user_id].update( {"step": "Item_menu", "category": items[0][1]})
    return msg.chat.id, msg.message_id

def select_quantity(bot,message,item_name,image_path=None,number_of_seats = 8,msg = ["",""]):
    user_id = message.from_user.id
    keyboard = create_inline_kbd(row_width=4,nums=number_of_seats,msg=msg)
    if image_path is not None:
        if not os.path.exists(image_path):#and os.path.isfile(file_path):
            image_path = os.path.join('img', 'empty.jpg')
        with open(image_path, 'rb') as photo:
            msg = bot.send_photo(message.chat.id,
                           photo=photo,
                           caption=f"{item_name} ",
                           reply_markup=keyboard,
                           parse_mode = 'HTML'
            )
        return msg.chat.id, msg.message_id


    #bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)


def make_menu_categories(bot,message,user_data):
    food_order_manager = init_fo_manager()
    categories = food_order_manager.get_menu_categories()
    msg = show_menu_categories(bot,message,categories,user_data)
    food_order_manager.db_manager.close()
    return msg

def make_menu_category_items(bot,message,user_data):
    food_order_manager = init_fo_manager()
    category_name = message.text
    if category_name == "–ù–∞–∑–∞–¥":
        make_menu_categories(bot, message, user_data)
        return
    category_id = next(
        category[0] for category in food_order_manager.get_menu_categories() if category[1] == category_name)
    items = food_order_manager.get_menu_items(category_id=category_id)

    msg = show_menu_category_items(bot, message, items, user_data)
    food_order_manager.db_manager.close()
    bot.delete_message(message.chat.id, message.message_id)
    return msg

def make_quantity_dialog(bot,message,user_data):
    food_order_manager = init_fo_manager()
    user_id = message.from_user.id
    item_name = message.text.split(' - ')[0]
    item_info = food_order_manager.get_menu_item_id_by_name(item_name)[0]
    item_id=item_info[0]
    item_category = food_order_manager.get_menu_categories(item_info[1])[0][1]
    item_caption = f"<u><b>{item_name}</b> - {item_info[4]} —Ä—É–±.</u>\n{item_info[3]}"
    user_data[user_id].update({
        'selected_item' : item_name,
        "step":"Item_quantity",
        "item_id":item_id,
        "category":item_category[2:-1],
    })
    folder=(user_data[user_id]["category"].split(" ")[0]).lower()
    file="_".join(user_data[user_id]["selected_item"].split(" "))+".jpg"
    print(user_data)
    image_path = os.path.join('img', folder, file)
    user_data[user_id]["old_message"] = select_quantity(bot, message, item_caption, image_path=image_path,  msg=["","—à—Ç."])
    bot.delete_message(message.chat.id, message.message_id)

def show_order(bot,message,user_data):
    food_order_manager = init_fo_manager()


def show_help(bot,message,user_data):
    help_text = (
        "üçΩ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /help - –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"

        "*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ '–ú–µ–Ω—é' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–µ–Ω—é\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'\n"
        "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ\n"
        "6. –û–ø–ª–∞—Ç–∏—Ç–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑\n\n"

        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ –±–ª—é–¥\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤\n\n"

        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )

    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
    bot.delete_message(message.chat.id, message.message_id)

def show_feedback(bot,message,user_data):
    bot.delete_message(message.chat.id, message.message_id)
    text = "–ú—ã —É–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º <b>—Å—É–ø–µ—Ä—Å–µ–∫—Ä–µ—Ç–Ω—ã–π</b> –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤... üçïü§ñ –ü–æ–∫–∞ –æ–Ω —É—á–∏—Ç—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å ¬´–≤–∫—É—Å–Ω–æ¬ª –∏ ¬´–æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ¬ª, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏! –°–∫–æ—Ä–æ –∑–∞–ø—É—Å—Ç–∏–º! üöÄ"
    bot.send_message(message.chat.id, text, parse_mode='HTML')


def show_pay_form(bot,message,user_data):
    user_id = message.from_user.id
    keyboard = create_inline_kbd(row_width=2, nums=3, values=["üí≥–ö–∞—Ä—Ç–æ–π üí≥","üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ üíµ", "üì± –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ üì±"], keys=['–ù–∞–∑–∞–¥',"pay_card","pay_cache","pay_mobile"] )
    image_path = r"img\pay_method.png"
    if not os.path.exists(image_path):  # and os.path.isfile(file_path):
        image_path = os.path.join('img', 'empty.jpg')
    with open(image_path, 'rb') as photo:
        msg = bot.send_photo(message.chat.id,
                             photo=photo,
                             caption=f"üí∞      –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã      üí∞",
                             reply_markup=keyboard,
                             parse_mode='HTML'
                             )
    return msg.chat.id, msg.message_id


def online_pay(bot,message,user_data):
    user_id = message.chat.id
    order_id = user_data[user_id]["order_id"]
    order = user_data[user_id]["pay_order"]
    # bot.delete_message(call.message.chat.id, call.message.message_id)
    threading.Thread(
        target=process_payment_animation,
        args=(bot,
              message,
              order[1],
              order[3],
              order[2],
              order_id,
              user_data
              )
    ).start()
